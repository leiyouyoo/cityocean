{"version":3,"file":"cityocean-shipment-library.js","sources":["ng://@cityocean/shipment-library/lib/entities/shipmentStatus.ts","ng://@cityocean/shipment-library/lib/pipes/shipment-status.pipe.ts","ng://@cityocean/shipment-library/lib/service/shipment.service.ts","ng://@cityocean/shipment-library/lib/shipment-library.module.ts"],"sourcesContent":["export const shipmentStatus = {\r\n  0: 'Seller \\'s Location / Booked',\r\n1: 'In Transit to Departure Port',\r\n2: 'Departure Port',\r\n3: 'In Transit to Arrival Port',\r\n4: 'Arrival  port',\r\n5: 'In Transit to Final Destination',\r\n6: 'Final destination',\r\n}\r\n\r\nexport enum ShipmentStatusEnum {\r\n  SellerLocation,\r\n  OriginStopOff,\r\n  InTransitToDeparturePort,\r\n  DeparturePort,\r\n  InTransitToArrivalPort,\r\n  ArrivalPort,\r\n  InTransitToFinalDestination,\r\n  DestinationStopOff,\r\n  FinalDestination,\r\n  Canceled,\r\n  Completed,\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ShipmentStatusEnum } from '../entities/shipmentStatus';\n\n@Pipe({\n  name: 'shipmentStatus'\n})\nexport class ShipmentStatusPipe implements PipeTransform {\n\n  transform(value: ShipmentStatusEnum, ...args: any[]): any {\n    switch (value) {\n      case ShipmentStatusEnum.SellerLocation:\n        return `Seller 's Location / Booked`;\n      case ShipmentStatusEnum.InTransitToDeparturePort:\n        return `In Transit to Departure Port`;\n      case ShipmentStatusEnum.DeparturePort:\n        return `Departure Port`;\n      case ShipmentStatusEnum.InTransitToArrivalPort:\n        return `In Transit to Arrival Port`;\n      case ShipmentStatusEnum.ArrivalPort:\n        return `Arrival  port`;\n      case ShipmentStatusEnum.InTransitToFinalDestination:\n        return `In Transit to Final Destination`;\n      case ShipmentStatusEnum.FinalDestination:\n        return `Final destination`;\n      default:\n        return '';\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@cityocean/common-library';\r\nimport { TransportationMode } from '../class/TransportationMode';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { flatten } from 'lodash';\r\nimport { ShipmentDetail } from '../entities/ShipmentDetail';\r\nimport { FreightMethodType } from '@cityocean/basicdata-library';\r\nimport { VesselTrackPoint } from '../entities/VesselTrackPoint';\r\nimport { ComponentToHtmlService, AmapService } from '@cityocean/amap-library';\r\nimport { ShipmentStatusEnum } from '../entities/shipmentStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShipmentService {\r\n  constructor(\r\n    public http: HttpService,\r\n    private amapService: AmapService,\r\n    private componentToHtmlService: ComponentToHtmlService,\r\n  ) {\r\n  }\r\n\r\n  GetAll(json: { SearchKey?: string, IsDelivered?: boolean, TransportationMode?: TransportationMode, Sorting?: string, MaxResultCount?: number, SkipCount?: number }) {\r\n    return this.http.postJson('/CSP/Shipment/GetAllList', json)\r\n      .pipe(map((data: any) => {\r\n        const temp = data.items;\r\n        temp.forEach(s => {\r\n          s.agreement = s.routeDetails.consigneeInfos.length === 0 && s.routeDetails.shipperInfos.length === 0 ? 'cy-cy' : s.routeDetails.shipperInfos.length === 0 ? 'cy-door' : s.routeDetails.consigneeInfos.length === 0 ? 'door-cy' : 'door-door';\r\n          s.transportType = s.freightMethodType === FreightMethodType.Ocean ? 'ship' : 'air';\r\n          try {\r\n            s.shiperShow = s.routeDetails.shipperInfos.length && s.routeDetails.shipperInfos[0].shipperNetWorkInfo.name || '';\r\n            s.consigneeShow = s.routeDetails.consigneeInfos.length && s.routeDetails.consigneeInfos[0].consigneeNetWorkInfo.name || '';\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n          s.state = s.status;\r\n          if (s.containerList) {\r\n            s.containerListShow = '';\r\n            s.containerList.forEach(sc => {\r\n              s.containerListShow += `${sc.count}*${sc.code}` + ' ';\r\n            });\r\n          }\r\n        });\r\n        return data;\r\n      }));\r\n  }\r\n\r\n  getStatistics() {\r\n    const url = `/CSP/Shipment/GetShipmentsStatistics`;\r\n    return this.http.get(url);\r\n  }\r\n\r\n  GetDetail(id: number): Observable<ShipmentDetail> {\r\n    return this.http.get('/CSP/Shipment/GetDetail', {id}) as any;\r\n  }\r\n\r\n  GetShipmentDetail(id: number) {\r\n    return this.http.get('/CSP/Shipment/GetShipmentDetail', {id});\r\n  }\r\n\r\n  getMapShipRoute(pointList = []) {\r\n    let mapIconList = [];\r\n    let line = [];\r\n    const point = {\r\n      yantian: {coor: [-247.388497, 22.551956], iconClass: 'icon-icon_oceanshipmentx'},\r\n      guangzhou: {coor: [-246.629063, 22.594968], iconClass: 'icon-icon_oceanshipmentx'},\r\n      angeles: {coor: [-118.243707, 34.053945], iconClass: 'icon-icon_oceanshipmentx'},\r\n    };\r\n    /*const result = e.some(o => o.name.includes('benefit')) &&\r\n      e.some(o => o.name.includes('angeles')) &&\r\n      e.some(o => o.name.includes('yantian'));*/\r\n    const transportType = {\r\n      ship: 'icon-icon_oceanshipmentx',\r\n      air: 'icon-icon_airshipmentx',\r\n    };\r\n    const result = pointList.filter(o => {\r\n      return o.name.includes('guangzhou') || o.name.includes('angeles') || o.name.includes('yantian');\r\n    });\r\n    const random = (arr: number[]) => {\r\n      return arr.map(o => o += Math.random());\r\n    };\r\n    if (result.length >= 1) {\r\n      mapIconList = result.map(o => {\r\n        if (o.name.includes('guangzhou')) {\r\n          return {\r\n            ...point.guangzhou,\r\n            id: o.id,\r\n            theme: o.isDanger ? 'error' : '',\r\n            iconClass: transportType[o.transportType],\r\n          };\r\n        }\r\n        if (o.name.includes('angeles')) {\r\n          return {\r\n            ...point.angeles,\r\n            id: o.id,\r\n            start: false,\r\n            theme: o.isDanger ? 'error' : '',\r\n            iconClass: transportType[o.transportType],\r\n          };\r\n        }\r\n        if (o.name.includes('yantian')) {\r\n          return {\r\n            ...point.yantian,\r\n            id: o.id,\r\n            theme: o.isDanger ? 'error' : '',\r\n            iconClass: transportType[o.transportType],\r\n          };\r\n        }\r\n      });\r\n      /*mapIconList.forEach(o => {\r\n        o.coor = random(o.coor);\r\n      });*/\r\n      /*this.fakeMapData = [\r\n        { coor: [-246.788497, 23.121956], iconClass: 'icon-icon_oceanshipmentx' },\r\n        { coor: [-247.388497, 22.551956], iconClass: 'icon-icon_oceanshipmentx' },\r\n        { coor: [-246.629063, 22.594968], iconClass: 'icon-icon_oceanshipmentx' },\r\n        { coor: [-118.243707, 34.053945], iconClass: 'icon-icon_oceanshipmentx' },\r\n      ]; */\r\n      if (result[0] && result[0].start !== false) {\r\n      }\r\n    }\r\n\r\n    return {iconList: mapIconList, line};\r\n  }\r\n\r\n  createShare(param = {}) {\r\n    return this.http.postJson('/CSP/ShipmentShareLink/Create', param);\r\n  }\r\n\r\n  getShareHistory(param = {}) {\r\n    const url = `/CSP/ShipmentShareLink/GetAll`;\r\n    return this.http.get(url, param);\r\n  }\r\n\r\n  shareSend(param) {\r\n    const url = `/CSP/ShipmentShareLink/Update`;\r\n    return this.http.put(url, param);\r\n  }\r\n\r\n  shareCancel(id: number) {\r\n    const url = `/CSP/ShipmentShareLink/Cancel`;\r\n    return this.http.postJson(url, {id});\r\n  }\r\n\r\n  getShipTrack(param: { vesselName: string, startTime: string, endTime: string, needCount?: number }): Observable<VesselTrackPoint[]> {\r\n    const url = `/PUB/VesselInfos/GetShipTrack`;\r\n    if (!param.needCount) param.needCount = 100;\r\n    return this.http.get(`${url}?VesselName=CMA%20CGM%20ORFEO&StartTime=12/15/2019%201:00:00%20AM&EndTime=1/19/2020%201:00:00%20AM&needCount=10000`)\r\n    // return this.http.get(url, param)\r\n      .pipe(\r\n        map((o: any[]) => {\r\n          return o.map(point => {\r\n            return {\r\n              ...point,\r\n              point: [point.longitudeDegree, point.latitudeDegree],\r\n            } as any;\r\n          });\r\n        }),\r\n      );\r\n  }\r\n\r\n  getShipmentTrackByRes(res: ShipmentDetail) {\r\n    const route = res.routeDetails;\r\n    return this.getShipTrack({\r\n      vesselName: res.vessel,\r\n      startTime: route.estDepatureOrginPortDate,\r\n      endTime: route.estArrivalDestinationPortDate\r\n    });\r\n  }\r\n\r\n  getAllPortsForOthers(parm: { IsFromBooking?: boolean, IsFromShipment?: boolean, IsFromOrigin?: boolean, IsFromDestination?: boolean }) {\r\n    return this.http.get('/CSP/Shipment/GetAllPortsForOthers', parm);\r\n  }\r\n\r\n  getAllLocationsForOthers(parm: { IsFromBooking?: boolean, IsFromShipment?: boolean, IsFromOrigin?: boolean, IsFromDestination?: boolean }) {\r\n    return this.http.get('/CSP/Shipment/GetAllLocationsForOthers', parm);\r\n  }\r\n\r\n  getAllCompanyForOthers() {\r\n    return this.http.get('/CSP/Shipment/GetAllCompanyForOthers');\r\n  }\r\n\r\n  createOrUpdateConditionGroup(param) {\r\n    return this.http.postJson('/Platform/BusinessFilter/CreateOrUpdateConditionGroup', param);\r\n  }\r\n\r\n  getShipmentLinkDetail(Id: number) {\r\n    let params = {Id};\r\n    return this.http.get('/CSP/ShipmentShareLink/GetDetail', params);\r\n  }\r\n\r\n  /**\r\n   * shipment çè·¯çº¿\r\n   * @param details\r\n   *   ç®ååæ°æ¯æ°ç»ï¼åºè¯¥ç¨ä¸å°æ°ç»ä¼ è¿æ¥çåºè¯¥é½æ¯åä¸ª\r\n   */\r\n  getShipmentMapDataByDetails(details: ShipmentDetail[]): Observable<{icons: any[], lines: any[], dashedLines: any[]}[]> {\r\n    return forkJoin(\r\n      details.map(detail => {\r\n        return new Promise<{icons: any[], lines: any[], dashedLines: any[]}>(async resolve => {\r\n          try {\r\n            const icons = [];\r\n            const lines = [];\r\n            const dashedLines = [];\r\n            let track: any[] = [];\r\n            const portAddress =\r\n              [detail.routeDetails.originPort, detail.routeDetails.destinationPort].map(port => `${port.name},${port.fullName}`);\r\n            const portPointList = (await forkJoin(portAddress.map(o => this.amapService.googleGeo(o))).toPromise())\r\n              .map(o => [o.geometry.location.lng, o.geometry.location.lat])\r\n\r\n            if (detail.freightMethodType === FreightMethodType.Ocean) {\r\n              // port icon\r\n              icons.push({\r\n                point: portPointList[0],\r\n                icon: 'icon-port',\r\n              }, { point: portPointList[1], icon: 'icon-port' });\r\n              track = await (this.getShipmentTrackByRes(detail)\r\n                .pipe(map(o => o.map(p => p.point)))\r\n                .toPromise());\r\n              // display when on the way\r\n              if (track.length && detail.status === ShipmentStatusEnum.InTransitToArrivalPort) {\r\n                icons.push({\r\n                  point: track[track.length - 1],\r\n                  icon: 'icon-ship-round',\r\n                });\r\n              }\r\n            } else {\r\n              // port icon\r\n              icons.push({\r\n                point: portPointList[0],\r\n                icon: 'icon-port',\r\n              }, { point: portPointList[1], icon: 'icon-port' });\r\n              // display when on the way\r\n              if (detail.status === ShipmentStatusEnum.InTransitToArrivalPort) {\r\n                icons.push({\r\n                  point:\r\n                    [track[0][0] + track[1][0], track[0][1] + track[1][1]]\r\n                    /*track.reduce(\r\n                      (acc: [number, number], cur: [number, number]) => acc.map((val, i) => [val + cur[i]])\r\n                    )*/.map(o => o / 2),\r\n                  icon: 'icon-airplane',\r\n                });\r\n              }\r\n            }\r\n            // track start and end at port\r\n            track.unshift(portPointList[0]);\r\n            track.push(portPointList[1]);\r\n            // on the way or finished\r\n            if ([ShipmentStatusEnum.InTransitToArrivalPort, ShipmentStatusEnum.ArrivalPort].includes(detail.status)) {\r\n              lines.push(track);\r\n            }\r\n            dashedLines.push(track);\r\n\r\n            const address = await Promise.all([\r\n              forkJoin(\r\n                detail.routeDetails.shipperInfos.map(o => this.amapService.googleGeo(o.shipperNetWorkInfo.streetAddress))\r\n              ).toPromise(),\r\n              forkJoin(\r\n                detail.routeDetails.consigneeInfos.map(o => this.amapService.googleGeo(o.consigneeNetWorkInfo.streetAddress))\r\n              ).toPromise(),\r\n            ]);\r\n\r\n            const [shipperAddressList, consigneeAddressList] = address.map(o => o ? o : []);\r\n            [shipperAddressList, consigneeAddressList].forEach((addressList, index) => {\r\n              addressList.map(geo => {\r\n                const point = [geo.geometry.location.lng, geo.geometry.location.lat];\r\n                icons.push({\r\n                  point,\r\n                  icon: 'icon-warehouse',\r\n                });\r\n                switch (index) {\r\n                  case 0:\r\n                    dashedLines.push([point, track[0]]);\r\n                    if (detail.status > ShipmentStatusEnum.InTransitToDeparturePort) {\r\n                      lines.push([point, track[0]]);\r\n                    } else if (detail.status === ShipmentStatusEnum.InTransitToDeparturePort) {\r\n                      icons.push({\r\n                        point: [point[0] + track[0][0], point[1] + track[0][1]].map(o => o / 2),\r\n                        icon: 'icon-truck',\r\n                      });\r\n                    }\r\n                    break;\r\n                  case 1:\r\n                    dashedLines.push([track[track.length - 1], point]);\r\n                    if (detail.status > ShipmentStatusEnum.InTransitToFinalDestination) {\r\n                      lines.push([track[track.length - 1], point]);\r\n                    } else if (detail.status === ShipmentStatusEnum.InTransitToFinalDestination) {\r\n                      icons.push({\r\n                        point: [point[0] + track[track.length - 1][0], point[1] + track[track.length - 1][1]].map(o => o / 2),\r\n                        icon: 'icon-truck',\r\n                      });\r\n                    }\r\n                    break;\r\n                  default:\r\n                }\r\n              });\r\n            });\r\n\r\n            resolve({icons, lines, dashedLines});\r\n          } catch (e) {\r\n            console.error(e);\r\n            resolve(null);\r\n          }\r\n        });\r\n      })\r\n    ).pipe(\r\n      map(o => o.filter(p => p)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * shipment ç¶æç¹\r\n   * @param details\r\n   */\r\n  getIconListByDetails(details: ShipmentDetail[]): Observable<{ point: number[], template: any, icon: string, data?: any }[]> {\r\n    const iconFactory = (p, icon, detail) => ({\r\n      point: [\r\n        p.geometry.location.lng + Math.random() * 0.008 - 0.004, // prevent multiple points on one coor\r\n        p.geometry.location.lat + Math.random() * 0.008 - 0.004,\r\n      ],\r\n      template: this.componentToHtmlService.getShipmentTemplate(detail),\r\n      icon,\r\n      data: detail,\r\n    });\r\n\r\n    const portIconFactory = (port, detail: ShipmentDetail) =>\r\n      this.amapService.googleGeo(`${port.name} ${port.fullName}`)\r\n        .pipe(\r\n          map(o => iconFactory(o,  detail.freightMethodType === FreightMethodType.Ocean ? 'icon-ship-round' : 'icon-airplane', detail))\r\n        ).toPromise();\r\n\r\n    const airFreightTypeIconFactory = async (detail) => {\r\n      const portAddress =\r\n        [detail.routeDetails.originPort, detail.routeDetails.destinationPort].map(port => `${port.name},${port.fullName}`);\r\n      const track = (await forkJoin(portAddress.map(o => this.amapService.googleGeo(o))).toPromise())\r\n        .map(o => [o.geometry.location.lng, o.geometry.location.lat]);\r\n      const icons = {\r\n        point:\r\n          track.reduce(\r\n            (acc: [number, number], cur: [number, number]) => acc.map((val, i) => val + cur[i])\r\n          ).map(o => o / 2),\r\n        icon: 'icon-airplane',\r\n        template: this.componentToHtmlService.getShipmentTemplate(detail),\r\n        data: detail\r\n      };\r\n      return icons;\r\n    };\r\n\r\n    const truckIconFactory = async (repoList: any[], port, detail) => {\r\n      const geoList = await forkJoin(\r\n        repoList.map(o => this.amapService.googleGeo(o.shipperNetWorkInfo.streetAddress))\r\n      ).toPromise()\r\n      const portGeo = await this.amapService.googleGeo(`${port.name},${port.fullname}`).toPromise();\r\n      return geoList.map(geo => {\r\n        geo.geometry.location.lng = (geo.geometry.location.lng + portGeo.geometry.location.lng) / 2;\r\n        geo.geometry.location.lat = (geo.geometry.location.lat + portGeo.geometry.location.lat) / 2;\r\n        return iconFactory(geo, 'icon-truck', detail)\r\n      })\r\n    }\r\n\r\n    return forkJoin(\r\n      // map to icon array\r\n      details.map(async detail => {\r\n        try {\r\n          const originPort = detail.routeDetails.originPort;\r\n          const destinationPort = detail.routeDetails.destinationPort;\r\n\r\n          // assemble icons\r\n          switch (detail.status) {\r\n            case ShipmentStatusEnum.SellerLocation:\r\n            case ShipmentStatusEnum.OriginStopOff:\r\n            case ShipmentStatusEnum.InTransitToDeparturePort:\r\n              return forkJoin(\r\n                detail.routeDetails.shipperInfos.map(o => this.amapService.googleGeo(o.shipperNetWorkInfo.streetAddress))\r\n              ).pipe(\r\n                map(o =>\r\n                  o.map(\r\n                    p => iconFactory(p, 'icon-warehouse-round', detail)\r\n                  )\r\n                )\r\n              ).toPromise();\r\n            case ShipmentStatusEnum.DeparturePort:\r\n              return portIconFactory(detail.routeDetails.originPort, detail);\r\n            case ShipmentStatusEnum.InTransitToArrivalPort:\r\n              // ship: if has track data display last point, else in port\r\n              // air: display in way\r\n              return detail.freightMethodType === FreightMethodType.Ocean ?\r\n                this.getShipmentTrackByRes(detail)\r\n                  .pipe(\r\n                    map(o => o.length ? iconFactory({ geometry: {location: { lng: o[length-1].point[0], lat: o[length-1].point[1] }}}, 'icon-ship-round', detail) : portIconFactory(detail.routeDetails.originPort, detail))\r\n                  ).toPromise()\r\n                : airFreightTypeIconFactory(detail);\r\n            case ShipmentStatusEnum.ArrivalPort:\r\n              return portIconFactory(detail.routeDetails.destinationPort, detail)\r\n            case ShipmentStatusEnum.InTransitToFinalDestination:\r\n              return truckIconFactory(detail.routeDetails.consigneeInfos, detail.routeDetails.destinationPort, detail);\r\n            case ShipmentStatusEnum.FinalDestination:\r\n              return forkJoin(\r\n                detail.routeDetails.consigneeInfos.map(o => this.amapService.googleGeo(o.consigneeNetWorkInfo.streetAddress))\r\n              ).pipe(\r\n                map(o =>\r\n                  o.map(\r\n                    p => iconFactory(p, 'icon-warehouse-round', detail)\r\n                  )\r\n                )\r\n              ).toPromise();\r\n            default:\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n          return [];\r\n        }\r\n      })\r\n\r\n    ).pipe(\r\n      catchError((e) => {\r\n        console.error(e);\r\n        return of([])\r\n      }),\r\n      map(o => flatten(o)),\r\n    )\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { ShipmentStatusPipe } from './pipes/shipment-status.pipe';\n\nconst pipes = [\n  ShipmentStatusPipe,\n]\n\n@NgModule({\n  declarations: [\n    ...pipes,\n  ],\n  imports: [\n  ],\n  exports: [\n    ...pipes,\n  ]\n})\nexport class ShipmentLibraryModule { }\n\n\nexport * from './service/shipment.service';\n"],"names":["tslib_1.__read"],"mappings":"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"}